INSTALLATION INSTRUCTIONS
=========================

Copyright (C) 2009 Free Software Foundation, Inc.

This file is free documentation; the Free Software Foundation gives
unlimited permission to copy, distribute and modify it.


DEPENDANCIES
============

KERL requires Erlang and Player to be installed.


You may need to modify the paths located at the top of ./kerlplayerlib/Makefile 
if your Erlang or Player sources are installed differently.

Below describes the paths you may need to change

P_INCLUDE - players include path
P_LIB - players library path
EI_INCLUDE - erlang interfaces include path
EI_LIB - erlang interfaces library path
ERL_INCLUDE - erlangs include path


BUILDING
========

Build KERL with 

# ./configure --prefix /usr/
# make

This will produce erlang beam files in ./module and a driver in ./lib.


ERL INTERFACE
-------------

If make fails to locate erlang interface you may need to change the prefix in configure.
The prefix may need to be the root path of

lib/erlang/lib/erl_interface-3.5.9/

if this directory is in 

/usr/lib/erlang/lib/erl_interface-3.5.9/

you need to do the following

# ./configure --prefix /usr/


LOCATING DRIVER
---------------

In most cases KERL should be able to locate the KERL driver without any modification to the code.

After building KERL the driver is located in 

./lib/kerl.so

When using KERL it will attempt to find the driver in the following directories:

./lib/,../lib/, ../../lib/, /lib/, /usr/lib/, /usr/local/lib/

Please refer to the code in ./module/driver.erl to add more paths.


INSTALL
=======

As root run:

# make install

KERL will be installed to erlang library directory.

You can test kerl by running:

# erl
Eshell V5.6.5  (abort with ^G)
1> mrh:start().
<0.35.0>


USAGE
=====

To allow the driver to run concurrently you must use the +A switch like below

# erl +A<number>

We prefer to use 24 asynchronous threads.  You may wish to lower or raise this 
depending on the speed of your computer.


EXAMPLE
=======

To test multibouncer run its Stage world file and than start it from Erlang.

# player worlds/multibouncer.cfg > /dev/null 2> /dev/null &
# cd ./examples/
# erl +A24
1> multibouncer:start(). 


